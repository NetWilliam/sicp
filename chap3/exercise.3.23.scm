; implementation for dequeue
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (make-item value)
  (let ((ret (list '() '() value)))
    (set-car! ret ret)
    (set-car! (cdr ret) ret)
    ret))
(define (set-prev! item prev)
  (set-car! item prev))
(define (set-next! item next)
  (set-car! (cdr item) next))

(define (queue-length queue)
  (define (b2e s e)
    (if (eq? s e)
        (list (caddr s))
      (append (list (val s)) (b2e (next s) e))))
  (length (b2e (front-ptr queue) (rear-ptr queue))))

(define (print-dequeue queue)
  (define (b2e s e)
    (if (eq? s e)
        (list (caddr s))
      (append (list (val s)) (b2e (next s) e))))
  (display "queue:")
  (display (b2e (front-ptr queue) (rear-ptr queue)))
  (newline)
  'None)

(define (val item)
  (caddr item))
(define (next item)
  (cadr item))
(define (prev item)
  (car item))

(define (empty-dequeue? queue)
  (null? (front-ptr queue)))
(define (front-dequeue queue)
  (if (empty-dequeue? queue)
      (error "FRONT called with an empty queue" queue)
    (car (front-ptr queue))))
(define (rear-dequeue queue)
  (if (empty-dequeue? queue)
      (error "REAR called with an empty queue" queue)
    (car (rear-ptr queue))))

(define (front-insert-dequeue! queue value)
  (let ((item (make-item value)))
    (if (empty-dequeue? queue)
        (begin
         (set-front-ptr! queue item)
         (set-rear-ptr! queue item)
         'queue)
      (begin
       (set-prev! item (rear-ptr queue))
       (set-next! item (front-ptr queue))
       (set-prev! (front-ptr queue) item)
       (set-next! (rear-ptr queue) item)
       (set-front-ptr! queue item)
       'queue))))
(define (rear-insert-dequeue! queue value)
  (let ((item (make-item value)))
    (if (empty-dequeue? queue)
        (begin
         (set-front-ptr! queue item)
         (set-rear-ptr! queue item)
         'queue)
      (begin
       (set-prev! item (rear-ptr queue))
       (set-next! item (front-ptr queue))
       (set-prev! (front-ptr queue) item)
       (set-next! (rear-ptr queue) item)
       (set-rear-ptr! queue item)
       'queue))))

(define (front-delete-dequeue! queue)
  (let ((head (front-ptr queue)) (tail (rear-ptr queue)))
    (cond ((empty-dequeue? queue)
           (error "FRONT DELETE called with a empty queue!" queue))
          ((eq? head tail)
           (set-front-ptr! queue '())
           (set-rear-ptr! queue '()))
          (else (let ((sub-head (next head)))
                  (set-prev! sub-head tail)
                  (set-next! tail sub-head)
                  (set-front-ptr! queue sub-head)
                  'queue)))))
(define (rear-delete-dequeue! queue)
  (let ((head (front-ptr queue)) (tail (rear-ptr queue)))
    (cond ((empty-dequeue? queue)
           (error "FRONT DELETE called with a empty queue!" queue))
          ((eq? head tail)
           (set-front-ptr! queue '())
           (set-rear-ptr! queue '()))
          (else (let ((sub-tail (prev ital)))
                  (set-prev! head sub-tail)
                  (set-next! sub-tail head)
                  (set-rear-ptr! queue sub-tail)
                  'queue)))))

(define (make-queue)
  (cons '() '()))

(define q (make-queue))
(front-insert-dequeue! q 3)
(front-insert-dequeue! q 1)
(rear-insert-dequeue! q 5)
(rear-insert-dequeue! q 7)
(front-delete-dequeue! q)
