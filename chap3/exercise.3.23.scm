; implementation for dequeue
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))

(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (make-item value)
  (let ((ret (list '() '() value)))
    (set-car! ret ret)
    (set-car! (cadr ret) ret)
    ret))
(define (set-prev! item prev)
  (set-car! item prev))
(define (set-next! item next)
  (set-car! (cdr item) prev))
(define (next item)
  (cadr item))
(define (prev item)
  (car item))

(define (empty-dequeue? queue)
  (null? (front-ptr queue)))
(define (front-dequeue queue)
  (if (empty-dequeue? queue)
      (error "FRONT called with an empty queue" queue)
    (car (front-ptr queue))))
(define (rear-dequeue queue)
  (if (empty-dequeue? queue)
      (error "REAR called with an empty queue" queue)
    (car (rear-ptr queue))))

(define (front-insert-dequeue! queue value)
  (let ((item (make-item value)))
    (if (empty-dequeue? queue)
        (begin
         (set-front-ptr! queue item)
         (set-rear-ptr! queue item)
         queue)
      (begin
       (set-prev! item (rear-ptr queue))
       (set-next! item (front-ptr queue))
       (set-prev! (front-ptr queue) item)
       (set-next! (rear-ptr queue) item)
       queue))))
(define (rear-insert-dequeue! queue item))

(define (front-delete-dequeue! queue)
  (cond ((empty-dequeue? queue)
         (error "FRONT DELETE called with a empty queue!" queue))
        ((eq? (rear-ptr queue) (front-ptr queue))
         (set-front-ptr! queue '())
         (set-rear-ptr! queue '()))))
(define (rear-delete-dequeue! queue))

(define (make-queue)
  (cons '() ()))
