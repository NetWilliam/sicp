(load "example.propagation.constrain.scm")

(define (c+ a1 a2)
  (let ((sum (make-connector)))
    (adder a1 a2 sum)
    sum))
(define (c* a1 a2)
  (let ((product (make-connector)))
    (multiplier a1 a2 product)
    product))
(define (c/ product divisor)
  (let ((quotient (make-connector)))
    (multiplier divisor quotient product)
    quotient))
(define (cv c)
  (let ((const (make-connector)))
    (constant c const)
    const))

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))

(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
(probe "Celsius temp" C)
(probe "Fahrenheit temp" F)
