; exercise 3.18 is also implemented as follow
(define (check-circle l)
  (define (next l)
    (if (null? l)
        '()
      (cdr l)))
  (define (double-next l)
    (if (null? l)
        '()
      (if (null? (cdr l))
          '()
        (cddr l))))
  (define (check fast slow)
    (cond ((null? fast) #f)
          ((eq? fast slow) #t)
          (else (check (double-next fast) (next slow)))))
  (check (cdr l) l))

(define x (cons 1 2))
(define y (cons 1 2))
(define z (cons 1 2))
(set-cdr! x y)
(set-cdr! y z)
(set-cdr! z x)
