(load "example.sep.syntactic.analysis.from.execution.scm")

(define (analyze expr)
  (cond ((self-evaluating? expr) (analyze-self-evaluating expr))
        ((islist? expr) (analyze-list expr))
        ((and? expr) (analyze-and expr))
        ((quoted? expr) (analyze-quoted expr))
        ((variable? expr) (analyze-variable expr))
        ((assignment? expr) (analyze-assignment expr))
        ((definition? expr) (analyze-definition expr))
        ((if? expr) (analyze-if expr))
        ((filter? expr) (analyze-filter expr))
        ((map? expr) (analyze-map expr))
        ((flatmap? expr) (analyze-flatmap expr))
        ((lambda? expr) (analyze-lambda expr))
        ((let? expr) (analyze-let expr))
        ((begin? expr) (analyze-sequence (begin-actions expr)))
        ((cond? expr) (analyze (cond->if expr)))
        ((application? expr) (analyze-application expr))
        (else (error "Unknown expression type: ANALYZE" expr))))

(define (let? exp) (tagged-list? exp 'let))
(define (let-body exp) (cddr exp))
(define (let-pairs exp) (cadr exp))
(define (let-vars exp) (map (lambda (pair) (car pair)) (let-pairs exp)))
(define (let-exps exp) (map (lambda (pair) (cadr pair)) (let-pairs exp)))

(define (analyze-let expr)
  (let ((vars (let-vars expr))
        (vals (map analyze (let-exps expr)))
        (bproc (analyze-sequence (let-body expr))))
    (lambda (env) (execute-application
                   (make-procedure vars bproc env)
                   (map (lambda (val) (val env)) vals)))))
; (let ((x (+ 3 5)) (y 3)) (+ x y))
