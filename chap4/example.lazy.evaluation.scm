(define origin-eval eval)
(define origin-apply apply)
(load "example.scm")

(define (eval expr env)
  (cond ((self-evaluating? expr) expr)
        ((islist? expr) (eval-list expr env))
        ((variable? expr) (lookup-variable-value expr env))
        ((quoted? expr) (text-of-quotation expr))
        ((and? expr) (eval-and expr env))
        ((assignment? expr) (eval-assignment expr env))
        ((definition? expr) (eval-definition expr env))
        ((if? expr) (eval-if expr env))
        ((filter? expr) (eval-filter expr env))
        ((map? expr) (eval-map expr env))
        ((flatmap? expr) (eval-flatmap expr env))
        ((lambda? expr) (make-procedure (lambda-parameters expr)
                                        (lambda-body expr)
                                        env))
        ((begin? expr)
         (eval-sequence (begin-actions expr) env))
        ((cond? expr) (eval (cond->if expr) env))
        ((application? expr)
         (apply (actual-value (operator expr) env)
                (operands expr)
                env))
        (else
         (error "Unknown expression type: EVAL" expr))))

(define (apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure
          procedure
          (list-of-arg-values arguments env)))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           (list-of-delayed-args arguments env)
           (procedure-environment procedure))))
        (else (error "Unknown procedure type: APPLY"
                     procedure))))

(define (list-of-arg-values exprs env)
  (if (no-operands? exprs)
      '()
      (cons (actual-value (first-operand exprs)
                          env)
            (list-of-arg-values (rest-operands exprs)
                                env))))
(define (list-of-delayed-args exprs env)
  (if (no-operands? exprs)
      '()
      (cons (delay-it (first-operand exprs)
                      env)
            (list-of-delayed-args (rest-operands exprs)
                                  env))))
(define (eval-if expr env)
  (if (true? (actual-value (if-predicate expr) env))
      (eval (if-consequent expr) env)
      (eval (if-alternative expr) env)))

(define input-prompt  ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output
           (actual-value
            input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))

(define (actual-value expr env)
  (force-it (eval expr env)))

(define (force-it obj)
  (if (thunk? obj)
      (actual-value (thunk-exp obj) (thunk-env obj))
      obj))

(define (delay-it expr env)
  (list 'thunk expr env))
(define (thunk? obj)
  (tagged-list? obj 'thunk))
(define (thunk-exp thunk) (cadr thunk))
(define (thunk-env thunk) (caddr thunk))

(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))
(define (thunk-value evaluated-thunk)
  (cadr evaluated-thunk))
(define (force-it obj)
  (cond ((thunk? obj)
         (let ((result (actual-value (thunk-exp obj)
                                     (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-car! (cdr obj)
                     result)
           (set-cdr! (cdr obj)
                     '())
           result))
        ((evaluated-thunk? obj) (thunk-value obj))
        (else obj)))
