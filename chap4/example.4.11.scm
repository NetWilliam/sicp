(load "example.scm")
(define (make-frame vars values) (map cons vars values))
(define (add-binding-to-frame! var val frame)
  (define (add-binding! binding frame)
    (cond ((null? (cdr frame)) (set-cdr! frame binding))
          (else (add-binding! binding (cdr frame)))))
  (add-binding! (list (cons var val)) frame))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (let ((binding (assoc var frame)))
        (if binding
            (cdr binding)
            (env-loop (enclosing-environment env)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (scan (first-frame env))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (let ((binding (assoc var frame)))
        (if binding
            (set-cdr! binding val)
            (env-loop (enclosing-environment env)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (scan (first-frame env))))
  (env-loop env))
(define (define-variable! var val env)
  (let* ((frame (first-frame env))
         (binding (assoc var frame)))
    (if binding
        (set-cdr! binding val)
        (add-binding-to-frame! var val frame))))
(define the-global-environment (setup-environment))
